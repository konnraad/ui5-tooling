import{_ as e,c as r,o as t,a4 as a}from"./chunks/framework.ILjNzZTu.js";const m=JSON.parse('{"title":"UI5 Server","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Server.md","filePath":"docs/Server.md"}'),o={name:"docs/Server.md"},s=a('<h1 id="ui5-server" tabindex="-1">UI5 Server <a class="header-anchor" href="#ui5-server" aria-label="Permalink to &quot;UI5 Server&quot;">​</a></h1><p>The <a href="https://github.com/SAP/ui5-server" target="_blank" rel="noreferrer">UI5 Server</a> module provides server capabilities for local development of UI5 projects.</p><p><a href="https://sap.github.io/ui5-tooling/v4/api/module-@ui5_server.html" target="_blank" rel="noreferrer"><strong>API Reference</strong></a></p><h2 id="standard-middleware" tabindex="-1">Standard Middleware <a class="header-anchor" href="#standard-middleware" aria-label="Permalink to &quot;Standard Middleware&quot;">​</a></h2><p>All available standard middleware are listed below in the order of their execution.</p><p>A project can also add custom middleware to the server by using the <a href="./extensibility/CustomServerMiddleware.html">Custom Server Middleware Extensibility</a>.</p><table tabindex="0"><thead><tr><th>Middleware</th><th>Description</th></tr></thead><tbody><tr><td><code>csp</code></td><td>See chapter <a href="#csp">csp</a></td></tr><tr><td><code>compression</code></td><td>Standard <a href="http://expressjs.com/en/resources/middleware/compression.html" target="_blank" rel="noreferrer">Express compression middleware</a></td></tr><tr><td><code>cors</code></td><td>Standard <a href="http://expressjs.com/en/resources/middleware/cors.html" target="_blank" rel="noreferrer">Express cors middleware</a></td></tr><tr><td><code>discovery</code></td><td>See chapter <a href="#discovery">discovery</a></td></tr><tr><td><code>serveResources</code></td><td>See chapter <a href="#serveresources">serveResources</a></td></tr><tr><td><code>testRunner</code></td><td>See chapter <a href="#testrunner">testRunner</a></td></tr><tr><td><code>serveThemes</code></td><td>See chapter <a href="#servethemes">serveThemes</a></td></tr><tr><td><code>versionInfo</code></td><td>See chapter <a href="#versioninfo">versionInfo</a></td></tr><tr><td><code>nonReadRequests</code></td><td>See chapter <a href="#nonreadrequests">nonReadRequests</a></td></tr><tr><td><code>serveIndex</code></td><td>See chapter <a href="#serveindex">serveIndex</a></td></tr></tbody></table><h3 id="csp" tabindex="-1">csp <a class="header-anchor" href="#csp" aria-label="Permalink to &quot;csp&quot;">​</a></h3><p>The Content Security Policy (<a href="https://www.w3.org/TR/CSP/" target="_blank" rel="noreferrer">CSP</a>) middleware is active by default.</p><p>The header <code>content-security-policy</code> can be set by adding URL parameter <code>sap-ui-xx-csp-policy</code> to the request with the policy name as value.</p><p>To set the policy to report-only, append <code>:report-only</code> or <code>:ro</code> to the policy name. E.g. <code>/index.html?sap-ui-xx-csp-policy=sap-target-level-1:report-only</code></p><h4 id="sendsaptargetcsp-parameter" tabindex="-1">sendSAPTargetCSP parameter <a class="header-anchor" href="#sendsaptargetcsp-parameter" aria-label="Permalink to &quot;sendSAPTargetCSP parameter&quot;">​</a></h4><p>The default CSP policies can be modified using parameter <code>sendSAPTargetCSP</code> (<code>--sap-csp-policies</code> when using the CLI). With <code>sendSAPTargetCSP</code> set to <code>true</code> the policies <code>sap-target-level-1</code> and <code>sap-target-level-3</code> policies are activated and send as report-only.</p><h4 id="serve-csp-reports" tabindex="-1">Serve CSP Reports <a class="header-anchor" href="#serve-csp-reports" aria-label="Permalink to &quot;Serve CSP Reports&quot;">​</a></h4><p>Serving of CSP reports can be activated with parameter <code>serveCSPReports</code> (<code>--serve-csp-reports</code> when using the CLI). With <code>serveCSPReports</code> set to <code>true</code>, the CSP reports are collected and can be downloaded from the server path <code>/.ui5/csp/csp-reports.json</code>.</p><h3 id="discovery" tabindex="-1">discovery <a class="header-anchor" href="#discovery" aria-label="Permalink to &quot;discovery&quot;">​</a></h3><p>This middleware lists project files with URLs under several <code>/discovery</code> endpoints. This is exclusively used by the OpenUI5 test suite application.</p><h3 id="serveresources" tabindex="-1">serveResources <a class="header-anchor" href="#serveresources" aria-label="Permalink to &quot;serveResources&quot;">​</a></h3><p>This middleware resolves requests using the <a href="https://github.com/SAP/ui5-fs" target="_blank" rel="noreferrer">ui5-fs</a>-file system abstraction.</p><p>The following file content transformations are executed:</p><ul><li>Escaping non-ASCII characters in <code>.properties</code> translation files based on a project&#39;s <a href="./Configuration.html#encoding-of-properties-files">configuration</a></li><li>Enhancing the <code>manifest.json</code> with supported locales determined by available <code>.properties</code> <a href="./Builder.html#generation-of-supported-locales">translation files</a></li></ul><h3 id="testrunner" tabindex="-1">testRunner <a class="header-anchor" href="#testrunner" aria-label="Permalink to &quot;testRunner&quot;">​</a></h3><p>Serves a static version of the UI5 QUnit TestRunner at <code>/test-resources/sap/ui/qunit/testrunner.html</code>.</p><h3 id="servethemes" tabindex="-1">serveThemes <a class="header-anchor" href="#servethemes" aria-label="Permalink to &quot;serveThemes&quot;">​</a></h3><p>Compiles CSS files for themes on-the-fly from the source <code>*.less</code> files.</p><p>Changes made to these <code>*.less</code> files while the server is running will automatically lead to the re-compilation of the relevant CSS files when requested again.</p><h3 id="versioninfo" tabindex="-1">versionInfo <a class="header-anchor" href="#versioninfo" aria-label="Permalink to &quot;versionInfo&quot;">​</a></h3><p>Generates and serves the version info file <code>/resources/sap-ui-version.json</code>, which is required for several framework functionalities.</p><h3 id="nonreadrequests" tabindex="-1">nonReadRequests <a class="header-anchor" href="#nonreadrequests" aria-label="Permalink to &quot;nonReadRequests&quot;">​</a></h3><p>Answers all non-read requests (POST, PUT, DELETE, etc.) that have not been answered by any other middleware with the 404 &quot;Not Found&quot; status code . This signals the client that these operations are not supported by the server.</p><h3 id="serveindex" tabindex="-1">serveIndex <a class="header-anchor" href="#serveindex" aria-label="Permalink to &quot;serveIndex&quot;">​</a></h3><p>In case a directory has been requested, this middleware renders an HTML with a list of the directory&#39;s content.</p><h2 id="ssl-certificates" tabindex="-1">SSL Certificates <a class="header-anchor" href="#ssl-certificates" aria-label="Permalink to &quot;SSL Certificates&quot;">​</a></h2><p>When starting the UI5 Server in HTTPS- or HTTP/2 mode, for example by using UI5 CLI parameter <code>--h2</code>, you will be prompted for the automatic generation of a local SSL certificate if necessary.</p><p>Follow the given instructions and enter your password to install the generated certificate as trusted. You can find the generated certificate and corresponding private key under <code>.ui5/server</code> in your user&#39;s home directory.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If Chrome unintentionally redirects an HTTP-URL to HTTPS, you need to delete the HSTS mapping in <a href="chrome://net-internals/#hsts" target="_blank" rel="noreferrer">chrome://net-internals/#hsts</a> by entering the domain name (e.g. localhost) and pressing &quot;delete&quot;.</p></div>',36),d=[s];function i(n,c,l,h,p,u){return t(),r("div",null,d)}const v=e(o,[["render",i]]);export{m as __pageData,v as default};
